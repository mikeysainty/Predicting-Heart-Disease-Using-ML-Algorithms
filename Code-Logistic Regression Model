from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix
import statsmodels.api as sm

# Logistic Regression Model
log_reg = LogisticRegression()
log_reg.fit(X_train_scaled, y_train)
y_pred_log_reg = log_reg.predict(X_test_scaled)

# Evaluation Metrics
accuracy_log_reg = accuracy_score(y_test, y_pred_log_reg)
precision_log_reg = precision_score(y_test, y_pred_log_reg)
recall_log_reg = recall_score(y_test, y_pred_log_reg)
f1_log_reg = f1_score(y_test, y_pred_log_reg)
roc_auc_log_reg = roc_auc_score(y_test, y_pred_log_reg)
conf_matrix_log_reg = confusion_matrix(y_test, y_pred_log_reg)

# Coefficients and P-Values using statsmodels
X_train_sm = sm.add_constant(X_train_scaled)  # Adding a constant column for statsmodels
logit_model = sm.Logit(y_train, X_train_sm)
result = logit_model.fit()
coefficients = result.params
p_values = result.summary2().tables[1]['P>|z|']

# Mapping coefficients and p-values to feature names
feature_names = ['const'] + list(X.columns)
coef_p_values = pd.DataFrame({
    'Coefficient': coefficients.values,
    'P-Value': p_values.values
}, index=feature_names)

# Display the results
print("Logistic Regression Metrics:")
print(f"Accuracy: {accuracy_log_reg}")
print(f"Precision: {precision_log_reg}")
print(f"Recall: {recall_log_reg}")
print(f"F1 Score: {f1_log_reg}")
print(f"ROC AUC: {roc_auc_log_reg}")
print("\nConfusion Matrix:")
print(conf_matrix_log_reg)
print("\nCoefficients and P-Values:")
print(coef_p_values)
